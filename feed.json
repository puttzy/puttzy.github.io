{
    "version": "https://jsonfeed.org/version/1",
    "title": "Puttz&#x27;n Around the cloud",
    "description": "",
    "home_page_url": "https://puttzy.github.io",
    "feed_url": "https://puttzy.github.io/feed.json",
    "user_comment": "",
    "icon": "https://puttzy.github.io/media/website/Bokehlicia-Captiva-Cloud.ico",
    "author": {
        "name": "Dan Putt"
    },
    "items": [
        {
            "id": "https://puttzy.github.io/managing-google-runtime-configurations.html",
            "url": "https://puttzy.github.io/managing-google-runtime-configurations.html",
            "title": "Managing Google Runtime Configurations",
            "summary": "<p>Using <a href=\"https://spring.io/projects/spring-cloud-config\">Spring Cloud Config</a> with <a href=\"https://cloud.google.com/deployment-manager/runtime-configurator/reference/rest/\">Google Runtime Configs</a> is pretty nice, but also pretty painful.  There's no UI.  No straight forward way to see the configurations (buckets) or the variables contained within.  No easy (user friendly way) to add, delete, or update the variables.  After dealing with this a few weeks I decided to spend some time to make my own <a href=\"https://github.com/puttzy/GoogleCloudConfigManager\">little bash script</a> to assist in this process.  </p>\n",
            "content_html": "<p>Using <a href=\"https://spring.io/projects/spring-cloud-config\">Spring Cloud Config</a> with <a href=\"https://cloud.google.com/deployment-manager/runtime-configurator/reference/rest/\">Google Runtime Configs</a> is pretty nice, but also pretty painful.  There's no UI.  No straight forward way to see the configurations (buckets) or the variables contained within.  No easy (user friendly way) to add, delete, or update the variables.  After dealing with this a few weeks I decided to spend some time to make my own <a href=\"https://github.com/puttzy/GoogleCloudConfigManager\">little bash script</a> to assist in this process.  </p>\n\n<p>The bash script* found on my <a href=\"https://github.com/puttzy/GoogleCloudConfigManager\">github</a> can be used to List Variables, Update Variables, add/Delete Variables.  Nothing too fancy overall, but it's saving me some time in working with this capability.</p>\n<p><img class=\"post__image\" src=\"https://puttzy.github.io/media/posts/10/Screen-Shot-2019-09-26-at-9.26.22-AM.png\" alt=\"\" width=\"1192\" height=\"516\"></p>\n<p>All of this works via command line using <a href=\"https://cloud.google.com/sdk/gcloud/reference/beta/runtime-config/configs/\">beta commands</a> within gcloud.  Example: <code>gcloud beta runtime-config configs</code> </p>\n<p>Some things I may consider doing include:</p>\n<ul>\n<li><span style=\"text-decoration: line-through;\">Create or Delete an entire config bucket</span></li>\n<li><span style=\"text-decoration: line-through;\">Add the ability to switch projects</span></li>\n<li>Backup a variable that changes or is deleted</li>\n<li>create a UI and use the <a href=\"https://cloud.google.com/deployment-manager/runtime-configurator/reference/rest/\">Cloud Runtime Configuration API</a></li>\n<li>Duplicate a configration and all variables </li>\n</ul>\n<p> </p>\n<p><em>*I use the phrase bash script loosely as I'm not a bash programmer.  I'm not good at it, I can just make things work.  I welcome any and all feedback, but right now, for my purposes this works pretty well</em></p>",
            "image": "https://puttzy.github.io/media/posts/10/SpringGCPConfig.jpg",
            "author": {
                "name": "Dan Putt"
            },
            "tags": [
            ],
            "date_published": "2019-09-26T09:56:29-04:00",
            "date_modified": "2019-09-26T14:02:49-04:00"
        },
        {
            "id": "https://puttzy.github.io/google-cloud-build-decrypting-kms-secrets.html",
            "url": "https://puttzy.github.io/google-cloud-build-decrypting-kms-secrets.html",
            "title": "Google Cloud Build decrypting KMS Secrets",
            "summary": "<p>In trying to follow more best practices and create a true reference architecture for Java in GCP I was trying to store my service account credential files encrypted using KMS then pull them out and decrypt them using using GCP KMS Service.  In doing so though I kept getting an error through Cloud Build saying I didn't have decrypt permissions.  </p>\n<p>It pains me to admit that this took me much longer to solve than it should have, mostly because of a deeply rooted <a href=\"https://www.urbandictionary.com/define.php?term=ID10T\">I.D.ten.T. error.</a>  </p>\n",
            "content_html": "<p>In trying to follow more best practices and create a true reference architecture for Java in GCP I was trying to store my service account credential files encrypted using KMS then pull them out and decrypt them using using GCP KMS Service.  In doing so though I kept getting an error through Cloud Build saying I didn't have decrypt permissions.  </p>\n<p>It pains me to admit that this took me much longer to solve than it should have, mostly because of a deeply rooted <a href=\"https://www.urbandictionary.com/define.php?term=ID10T\">I.D.ten.T. error.</a>  </p>\n\n<p>I started this process by following most of the excellent guide I found on a post on Medium - <a href=\"https://medium.com/google-cloud/using-google-cloud-platforms-cloud-key-management-service-kms-to-encrypt-decrypt-secrets-8ca7454a6b96\">Using GCP's Cloud Key Management Serice (KMS) to Encrypt/Decrypt Secrets</a>.</p>\n<p>In an earlier post I mentioned that I was storing my credentials file in a cloud storage bucket unencrypted.  Not great, right?  Changing that to storing an excrypted file was actually quite easy using GCP's KMS system.  </p>\n<p>The first thing one should do is create a new key-ring and new key - <em>keep in mind that key-rings cannot be deleted</em></p>\n<pre>gcloud kms keys create datastore-key \\<br>--location global \\<br>--keyring {your_keyring_name} \\<br>--purpose encryption</pre>\n<p>Then we'll create a new key and encrypt our plaintext (credetial) file into a new ciphertext (encrypted credential) file to upload into our cloud storage bucket.  If you saw <a href=\"inject-credentials-file-during-cloud-build.html\">my previous post</a>, you may know that the file I'm working with is a service account credentials file I created to allow StackDriver logging to be done through my cloud run application.  This file is being pulled down via one of my build steps.  But now, before uploading it, I want to encrypt it.   </p>\n<pre>gcloud kms encrypt --location=global \\<br>  --keyring=development-key-ring \\<br>  --key=datastore-key \\<br>  --plaintext-file=logging_service_account.json \\<br>  --ciphertext-file=encrypted_logging_service_account.json</pre>\n<p>The command above uses the key-ring we previosuly created, uses a new key of \"data-store\" and encrypts the local <em>logging_service_account.json</em> to a new file called <em>encyrpted_local logging_service_account.json</em>.  This encrypted file is what I'll now put in my storage bucket to be pulled, decrypted, and injected into my cloud run container via cloud build.</p>\n<pre>  # Pull the credentials file from our storage bucket<br>- name: 'gcr.io/cloud-builders/gsutil'<br>  args: ['cp', 'gs://{bucket_name}/encrypted_logging_service_account.json', './src/main/jib/cred']<br><br>  # decrypt the credentials file that we just pulled down<br>- name: 'gcr.io/cloud-builders/gcloud'<br>  args: ['kms', 'decrypt', '--location', 'global', '--keyring', 'development-key-ring', '--key', 'datastore-key', '--ciphertext-file', './src/main/jib/cred/encrypted_logging_service_account.json', '--plaintext-file', './src/main/jib/cred/logging_service_account.json']</pre>\n<p> </p>\n<p>Notice that the decrypt step, the second one, is virtually a reversal of the previous encrypt step.  </p>\n<p>Now we should be good to go.  Run our cloud build and all is right with the world.... Until we get a permissions issue.</p>\n<p class=\"msg msg--warning\">ERROR: build step 1 \"gcr.io/cloud-builders/gcloud\" failed: exit status 1<br>ERROR<br>Finished Step #1<br>Step #1: ERROR: (gcloud.kms.decrypt) PERMISSION_DENIED: Permission 'cloudkms.cryptoKeyVersions.useToDecrypt' denied for resource 'projects/inventory-dev-project/locations/global/keyRings/development-key-ring/cryptoKeys/datastore-key'.</p>\n<p> </p>\n<p><img class=\"post__image--left\" src=\"https://puttzy.github.io/media/posts/9/Screen-Shot-2019-09-09-at-11.10.08-PM.png\" alt=\"Add the KMS Decrypt Role to Cloud Run Agent\" width=\"310\" height=\"244\">This is where I spent more time than I'll readily admit.  Just know that I had the best of intentions when I started adding the \"Cloud KMS CryptoKey Decrypter\" to my Cloud Build service account.  The wrong service account apparently.  But we won't get into that.  Suffice it to say that once I added the permission to the correct account everything worked fine.</p>\n<p> </p>\n<p>In my trial and error though I did learn that I can also do this via <a href=\"https://cloud.google.com/kms/docs/iam\">GCloud commands</a>:</p>\n<pre>gcloud kms keyrings add-iam-policy-binding  \\<br>  --location=global development-key-ring \\<br>  --member=serviceAccount:{unique_id}@cloudbuild.gserviceaccount.com \\<br>  --role=roles/cloudkms.cryptoKeyDecrypter</pre>\n<p>So there you have it.  Encrypting a file, putting it in cloud storage, pulling it during cloud build, decrypting it, and injecting it into our container to be used at runtime.  </p>\n<h3 id=\"mcetoc_1dkdonsmk0\"><strong>Some other things I learned and next steps:</strong></h3>\n<h4 id=\"mcetoc_1dkdoo2ft1\">1. Determine what service account is the GCP  running process under</h4>\n<p>When debugging and trying to figure out why my service account constantly got permission denied even though I kept adding the permissions I realized I was working with the wrong service account.  I was able to figure this out with a simple step in my cloud build that told me who the agent was running as:</p>\n<pre>- name: 'gcr.io/cloud-builders/gcloud'<br>  args: ['auth', 'list']</pre>\n<p>which outputted:</p>\n<pre class=\"p6n-gcb-log p6n-gcb-log-wrap-lines\">* <strong>{unique_project_id}@cloudbuild.gserviceaccount.com</strong>\nACTIVE ACCOUNT\nCredentialed Accounts</pre>\n<h4 id=\"mcetoc_1dkdoo2ft1\">2. Next Step Encrypt the Storage Bucket and not the file itself</h4>\n<p>I believe it would be beneficial to <a href=\"https://cloud.google.com/storage/docs/encryption/\">encrypt the bucket</a> and everything that goes into it so that everything is automatically encrypted.  This ensure much better security.</p>\n<p> </p>",
            "image": "https://puttzy.github.io/media/posts/9/design-desk-eyewear-313690.jpg",
            "author": {
                "name": "Dan Putt"
            },
            "tags": [
            ],
            "date_published": "2019-09-10T09:50:24-04:00",
            "date_modified": "2019-09-10T10:42:25-04:00"
        },
        {
            "id": "https://puttzy.github.io/inject-credentials-file-during-cloud-build.html",
            "url": "https://puttzy.github.io/inject-credentials-file-during-cloud-build.html",
            "title": "Inject Credentials file with Cloud Build",
            "summary": "<p>The saga continues....</p>\n<p>In trying to get my jibbized container <em>(yes, the same one I continue to write about)</em> to run in <a href=\"https://cloud.google.com/run/\">Google Cloud Run</a> I started getting an error with my Spring Boot Stack driver logging.  I wasn't getting this error when deploying locally so what could it be?</p>\n",
            "content_html": "<p>The saga continues....</p>\n<p>In trying to get my jibbized container <em>(yes, the same one I continue to write about)</em> to run in <a href=\"https://cloud.google.com/run/\">Google Cloud Run</a> I started getting an error with my Spring Boot Stack driver logging.  I wasn't getting this error when deploying locally so what could it be?</p>\n\n<p>In this project I'm using <a href=\"https://docs.spring.io/spring-cloud-gcp/docs/1.1.0.M1/reference/html/_stackdriver_logging_support.html\">Spring Cloud Stack Driver Logging</a> so that I can plug right into the robust tools GCP provides out of the box for logging.  When running locally I found that have have to <em><strong>GOOGLE_APPLICATION_CREDENTIALS</strong></em> environment variable.  </p>\n<p>In my local build this is fine since in my jib task I can set it at compile time to a local file since jib <a href=\"https://github.com/GoogleContainerTools/jib/tree/master/jib-gradle-plugin#adding-arbitrary-files-to-the-image\">copies everything from the src/main/jib</a> directory into the new container.  </p>\n<pre>jib {<br>    to {<br>        image= \"gcr.io/${System.env.GCP_PROJECT}/{MyServiceName}\"<br>        tags= ['{TagForImage}']<br>    }<br>    container {<br>        environment=[<strong>GOOGLE_APPLICATION_CREDENTIALS: './cred/logging_service_account.json'</strong>]<br>        ports= ['8080']<br>    }<br>}</pre>\n<p>But when running in <a href=\"onsole.cloud.google.com\">Google Cloud Build</a> I don't have the credentials file since I dont want to put it into my source repository.  This causes an error on startup of the application</p>\n<p class=\"msg msg--warning\">java.lang.RuntimeException: com.google.cloud.logging.LoggingException: io.grpc.StatusRuntimeException: PERMISSION_DENIED: The request is missing a valid API key. at com.google.cloud.logging.LoggingImpl$7.onFailure(LoggingImpl.java:616) at com.google.api.core.ApiFutures$1.onFailure(ApiFutures.java:68) at </p>\n<p>So how can this be solved?  </p>\n<p>Well, the quick way is to</p>\n<ol>\n<li>Create a private <a href=\"https://cloud.google.com/storage/docs/creating-buckets\">Google Cloud Storage Bucket</a></li>\n<li>Upload the credentials file <em>(This assumes you know how to create the logging credentials file)</em></li>\n<li>Use GSUtil to download the file and copy it into your project directory</li>\n</ol>\n<p>Here is what that last step looks like in your cloudbuild.yaml file</p>\n<pre>steps:<br>  - name: 'gcr.io/cloud-builders/gsutil'<br>    args: ['cp', 'gs://{project-name}/{credential_file_name}.json', './src/main/jib/cred']</pre>\n<p>Eventually I'll switch all of this to use <a href=\"https://cloud.google.com/kms/\">Google Cloud KMS</a> and do it securely.  But for now this got me down the road.</p>\n<p>*<strong>update</strong>:  I've now explained how to use <a href=\"google-cloud-build-decrypting-kms-secrets.html\">GCP's KMS functionality to encrypt and decrypt a credentials file</a>*</p>\n<p class=\"msg msg--info\">*One thing to note - make sure the directory you are copying into - in my case ./src/main/jib/cred exists.  The copy step will show success but the file will not be download if it doesn't exist*</p>",
            "author": {
                "name": "Dan Putt"
            },
            "tags": [
            ],
            "date_published": "2019-09-09T22:20:56-04:00",
            "date_modified": "2019-09-10T14:11:53-04:00"
        },
        {
            "id": "https://puttzy.github.io/deploying-springboot-container-to-cloud-run-via-cloud-build.html",
            "url": "https://puttzy.github.io/deploying-springboot-container-to-cloud-run-via-cloud-build.html",
            "title": "Cloud Build + Cloud Run Errors",
            "summary": "<p>When deploying my newly <em>jibized application to <a href=\"https://cloud.google.com/run/\">Google Cloud Run</a> via</em> <a href=\"https://cloud.google.com/cloud-build/\">Google Cloud Build</a> I was plagued with a seemingly simple error that took me much longer to figure out than it should have.</p>\n",
            "content_html": "<p>When deploying my newly <em>jibized application to <a href=\"https://cloud.google.com/run/\">Google Cloud Run</a> via</em> <a href=\"https://cloud.google.com/cloud-build/\">Google Cloud Build</a> I was plagued with a seemingly simple error that took me much longer to figure out than it should have.</p>\n\n<pre class=\"p6n-gcb-log p6n-gcb-log-wrap-lines\">ERROR: (gcloud.beta.run.deploy) PERMISSION_DENIED: The caller does not have permission</pre>\n<p>I wasn't getting the error when using the <a href=\"https://cloud.google.com/cloud-build/docs/build-debug-locally\">cloud-build-local</a> CLI command.  So, being the simple genius I am, surmized it must be a permission issue on the agent running the task. </p>\n<p>The first thing I did was go into <a href=\"https://cloud.google.com/iam/\">IAM</a>, find the <em>${ProjectId}@cloudbuild.gserviceaccount.com </em>service account and give it the Cloud Run Admin role.  Easy enough, rerun and it will work.....</p>\n<p>Or, in my case, get a new error:</p>\n<pre class=\"p6n-gcb-log p6n-gcb-log-wrap-lines\">Starting Step #2\nStep #2: Already have image (with digest): gcr.io/cloud-builders/gcloud\nStep #2: Deploying container to Cloud Run service [catalog-service-jib] in project [my-project-name] region [us-east1]\nStep #2: Deploying...\nStep #2: failed\nStep #2: Deployment failed\nStep #2: ERROR: gcloud crashed (KeyError): u'details'\nStep #2: \nStep #2: If you would like to report this issue, please run the following command:\nStep #2: gcloud feedback\nStep #2: \nStep #2: To check gcloud for common problems, please run the following command:\nStep #2: gcloud info --run-diagnostics\nFinished Step #2\nERROR\nERROR: build step 2 \"gcr.io/cloud-builders/gcloud\" failed: exit status 1</pre>\n<p>From this I can assume that I got the right user as I got a new error....But it doesn't solve my actual problem of not being able to deploy my app via Cloud Build.</p>\n<p>Playing around, taking some wild guesses, screwing up some permissions I decided to finally succomb and ask the Google Machine what was going on.  Within a few click I had track down the missing role: <a href=\"https://cloud.google.com/iam/docs/service-accounts#the_service_account_user_role\">Service Account User</a> - Which even after reading still hurt my head but it was a little late, and I was tired.</p>\n<p>Adding that magic role allowed my container to deploy and start (and fail do a credentails file I have to inject into mty container but dont want to check in to my repo.....but that's a problem for another time)</p>\n<p class=\"msg msg--highlight \"><strong>Takeaways I want to follow up on:</strong><br>1. Service Account User Role<br>2. How to run a command as a specific user - name when I get an error during cloud build how can I run somethng as the cloud build agent account<br>    - this would be especially helpful if I coudl do this from cloud shell</p>",
            "author": {
                "name": "Dan Putt"
            },
            "tags": [
            ],
            "date_published": "2019-09-06T21:56:18-04:00",
            "date_modified": "2019-09-09T22:33:08-04:00"
        },
        {
            "id": "https://puttzy.github.io/spring-boot-healthchecks-in-google-cloud-run.html",
            "url": "https://puttzy.github.io/spring-boot-healthchecks-in-google-cloud-run.html",
            "title": "Spring Boot Healthchecks in Google Cloud Run",
            "summary": "When trying to get my Spring Boot application to run on Google Cloud Run the health checks were returning { \"status\": \"DOWN\" }Which is odd when you consider the fact that I could get to the health check itself. How can it be running yet return&hellip;",
            "content_html": "<p>When trying to get my Spring Boot application to run on Google Cloud Run the health checks were returning </p>\n<pre>{<br>  \"status\": \"DOWN\"<br>}</pre>\n<p>Which is odd when you consider the fact that I could get to the health check itself.  How can it be running yet return a status of down?</p>\n<p>In my Cloud Run logs I saw the error:</p>\n<pre>o.s.b.a.system.DiskSpaceHealthIndicator : Free disk space below threshold. Available: 0 bytes (threshold: 10485760B)</pre>\n<p>After doing some digging, since I've never really looker too deeply into the <a href=\"It turns out, for the unitiated like me, Spring checks a bunch of items when performing a healthcheck.\">Spring Health Indicators</a>, I realized that spring checks a bunch of different items as part of their status.  Disk Space being one of them.  </p>\n<p>Since I'm running this as <em>a <a href=\"https://cloud.google.com/blog/products/gcp/introducing-jib-build-java-docker-images-better\">jibbified</a> Spring</em> Boot application I didn't reserve any diskspace and the application is running in a OCI without an underlying OS - which totally makes sense why it was failing.</p>\n<p>The first thing I did was enable showing the details of the health check (/actuator/health).  In my application.yaml I added:</p>\n<pre>spring.endpoint.health.show-details=always</pre>\n<p>which returned me a bunch more information - notice the <strong>bold</strong> line below</p>\n<pre>{<br>  <strong>\"status\": \"DOWN\",</strong><br><strong>  \"details\": {</strong><br><strong>    \"diskSpace\": {</strong><br><strong>      \"status\": \"DOWN\",</strong><br><strong>      \"details\": {</strong><br><strong>        \"total\": 0,</strong><br><strong>        \"free\": 0,</strong><br><strong>        \"threshold\": 10485760</strong><br><strong>      }</strong><br><strong>    },</strong><br>    \"db\": {<br>      \"status\": \"UP\",<br>      \"details\": {<br>        \"database\": \"MySQL\",<br>        \"hello\": 1<br>      }<br>    },<br>    \"refreshScope\": {<br>      \"status\": \"UP\"<br>    },<br>    \"discoveryComposite\": {<br>      \"status\": \"UP\",<br>      \"details\": {<br>        \"discoveryClient\": {<br>          \"status\": \"UP\",<br>          \"details\": {<br>            \"services\": [\"api-gateway\", \"catalog-service\", \"cart-service\"]<br>          }<br>        },<br>        \"eureka\": {<br>          \"description\": \"Eureka discovery client has not yet successfully connected to a Eureka server\",<br>          \"status\": \"UP\",<br>          \"details\": {<br>            \"applications\": {<br>              \"API-GATEWAY\": 1,<br>              \"CATALOG-SERVICE\": 1,<br>              \"CART-SERVICE\": 1<br>            }<br>          }<br>        }<br>      }<br>    },<br>    \"hystrix\": {<br>      \"status\": \"UP\"<br>    }<br>  }<br>}</pre>\n<p>When one of the health indicators is \"down\" the status of the service returns \"down\" - which in turn removes it completely from Eureka.</p>\n<p>By addinng another simple config to my application.yaml I was able to fix this problem </p>\n<pre>health.diskspace.enabled=false</pre>\n<p>Which removed the disck check from my status, and listed the entire service a healthy  and allowed it to register with Eureka   </p>\n<pre><br>  \"status\": \"UP\",<br>  \"details\": {<br>    \"db\": {<br>      \"status\": \"UP\",<br>      \"details\": {<br>        \"database\": \"MySQL\",<br>        \"hello\": 1<br>      }<br>    },<br>    \"refreshScope\": {<br>      \"status\": \"UP\"<br>    },<br>    \"discoveryComposite\": {<br>      \"status\": \"UP\",<br>      \"details\": {<br>        \"discoveryClient\": {<br>          \"status\": \"UP\",<br>          \"details\": {<br>            \"services\": [\"api-gateway\", \"cart-service\", \"catalog-service\"]<br>          }<br>        },<br>        \"eureka\": {<br>          \"description\": \"Remote status from Eureka server\",<br>          \"status\": \"UP\",<br>          \"details\": {<br>            \"applications\": {<br>              \"API-GATEWAY\": 1,<br>              \"CATALOG-SERVICE\": 1,<br>              \"CART-SERVICE\": 1<br>            }<br>          }<br>        }<br>      }<br>    },<br>    \"hystrix\": {<br>      \"status\": \"UP\"<br>    }<br>  }<br>}</pre>",
            "image": "https://puttzy.github.io/media/posts/2/cloud-run.png",
            "author": {
                "name": "Dan Putt"
            },
            "tags": [
            ],
            "date_published": "2019-09-05T22:31:35-04:00",
            "date_modified": "2019-09-06T11:40:21-04:00"
        }
    ]
}
