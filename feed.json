{
    "version": "https://jsonfeed.org/version/1",
    "title": "Puttz&#x27;n Around the cloud",
    "description": "",
    "home_page_url": "https://puttzy.github.io",
    "feed_url": "https://puttzy.github.io/feed.json",
    "user_comment": "",
    "icon": "https://puttzy.github.io/media/website/Bokehlicia-Captiva-Cloud.ico",
    "author": {
        "name": "Dan Putt"
    },
    "items": [
        {
            "id": "https://puttzy.github.io/viewing-google-cloud-run-metrics-in-stack-driver.html",
            "url": "https://puttzy.github.io/viewing-google-cloud-run-metrics-in-stack-driver.html",
            "title": "Viewing Google Cloud Run Metrics in Stack Driver",
            "summary": "<p><em>This may be my first post with a title where I don't just name technologies.  This may also be the shortest post I have written.</em></p>\n<p>It has taken me longer than it should have to find the documentation around viewing Cloud Run metrics in Stack driver than it should.  I hope this can save someone  some time.</p>\n",
            "content_html": "<p><em>This may be my first post with a title where I don't just name technologies.  This may also be the shortest post I have written.</em></p>\n<p>It has taken me longer than it should have to find the documentation around viewing Cloud Run metrics in Stack driver than it should.  I hope this can save someone  some time.</p>\n\n<p class=\"msg msg--highlight \"><em>Keep in mind, that at this point I'm exploring only the <strong>Fully Managed Cloud Run</strong> and not the Cloud Run for Anthos</em></p>\n<p>While the metrics provided out of the box in your Cloud Run service details are handy they only give you an idea about that specific service.  If you want to see aggregates of all your cloud run services in one palce you'll want to hop into the <em>real</em> <a href=\"https://cloud.google.com/monitoring/\">Stack Driver Monitoring</a> tool. </p>\n<p>To do this open up your main Google Cloud menu and scroll until you see a header of <em><strong>STACKDRIVER</strong></em> then <em><strong>Monitoring.  (</strong></em>If you haven't done so already, <a href=\"https://cloud.google.com/monitoring/workspaces/guide#create-quickly\" target=\"_blank\" class=\"external\" rel=\"noopener noreferrer\">add your project to a Stackdriver Monitoring workspace</a>.)</p>\n<figure class=\"post__image post__image--left\" ><img src=\"https://puttzy.github.io/media/posts/14/Screen-Shot-2019-10-08-at-4.00.04-PM.png\" alt=\"\" width=\"962\" height=\"628\">\n<figcaption >Get to metrics explorer</figcaption>\n</figure>\n<p>From here you'll want to go to <strong>Resources &gt; Metrics Explorer</strong>.  And this is where I really started to get lost.  There are so many options I struggled to find anything useful to my own Cloud Run Instances.  But typing in \"<em>Cloud Run\"</em>, I found a type called \"Cloud Run Revision\" (<em>cloud_run_revision) </em>which in NO WAY limited my responses in the next box - metric. </p>\n<figure class=\"post__image post__image--right\" ><img src=\"https://puttzy.github.io/media/posts/14/Screen-Shot-2019-10-08-at-3.55.01-PM.png\" alt=\"Metrics available to Clour Run instances\" width=\"265\" height=\"260\">\n<figcaption >Available Cloud Run metrics</figcaption>\n</figure>\n<p> </p>\n<p>Eventually I found my way to some <a href=\"https://cloud.google.com/monitoring/api/metrics_gcp#gcp-run\">Google documentation</a> that says that all Cloud Run metrics will start with <em><strong>run.googleapis.com.  </strong></em>Sure enough, typing that into the box gave me a small list of items I could add metrics on.</p>\n<p>Overall there's not a lot that can be done in here that you can't see in the mertrics explorer of your service.  The exception being is that you can see everything consolidated in one place.   </p>\n<p>My one complaint about this is that, I wish that once I chose my resource type it would filter my list of metrics to only those that make sense against it.  The list of things I can report on is huge, but within my resource type is is really small, and having to remember that everything starts with <em><strong>run.googleapis.com </strong></em>is a bit of a pain<em><strong>.  </strong></em></p>\n<p><span style=\"text-decoration: underline;\"><strong>Helpful Links:</strong></span></p>\n<p>* <a href=\"https://cloud.google.com/run/docs/monitoring#viewing_metrics_in\">Viewing Metrics in Stack Driver Monitoring<br>*</a> <a href=\"https://cloud.google.com/monitoring/api/metrics_gcp#gcp-run\">Metrics available for Cloud Run</a></p>",
            "image": "https://puttzy.github.io/media/posts/14/Screen-Shot-2019-10-08-at-3.38.58-PM.png",
            "author": {
                "name": "Dan Putt"
            },
            "tags": [
            ],
            "date_published": "2019-10-09T16:19:33-04:00",
            "date_modified": "2019-10-09T16:19:33-04:00"
        },
        {
            "id": "https://puttzy.github.io/spring-boot-jib-google-cloud-run-stack-driver-debugging.html",
            "url": "https://puttzy.github.io/spring-boot-jib-google-cloud-run-stack-driver-debugging.html",
            "title": "Spring Boot + Jib + Google Cloud Run + Stack driver debugging",
            "summary": "<p>Yeah - there'e no elegant title to this if I want you to understand what exactly you're about to dive into.  It is exactly what it says.  A breif, high-level overview of getting <a href=\"https://cloud.google.com/debugger/\">Stack Driver Debugger</a> working on a Spring boot project in <a href=\"https://cloud.google.com/run/\">Google Cloud Run </a>using <a href=\"https://github.com/GoogleContainerTools/jib\">jib</a>.  This is not in depth, but much more of an overview of how I got the basics working.</p>\n",
            "content_html": "<p>Yeah - there'e no elegant title to this if I want you to understand what exactly you're about to dive into.  It is exactly what it says.  A breif, high-level overview of getting <a href=\"https://cloud.google.com/debugger/\">Stack Driver Debugger</a> working on a Spring boot project in <a href=\"https://cloud.google.com/run/\">Google Cloud Run </a>using <a href=\"https://github.com/GoogleContainerTools/jib\">jib</a>.  This is not in depth, but much more of an overview of how I got the basics working.</p>\n\n<p>I don't wanna waste a lot of your time, or mine, writing about what each of these things is or does.  If you are here you are probably already familiar with each technology but may be looking to solve this exact use-case.  Or you're bored and wanted to read up.  Either way, while this is basic, it is not ground zero basic.</p>\n<p>There were a few good resources that enabled me to get down this path:</p>\n<ul>\n<li class=\"devsite-page-title\">Setting Up Stackdriver Debugger for Java - <a href=\"https://cloud.google.com/debugger/docs/setup/java#cloud-run\">Cloud Run and Cloud Run for Anthos on Google Cloud</a></li>\n<li class=\"devsite-page-title\">Jib - <a href=\"https://github.com/GoogleContainerTools/jib/tree/master/jib-gradle-plugin#extended-usage\">Extended usage</a></li>\n</ul>\n<p><strong>Step 1: </strong><strong>Download and unzip the stackdriver agent</strong></p>\n<pre class=\"devsite-code-button-clone\"><code><span class=\"pln\">RUN mkdir </span><span class=\"pun\">/</span><span class=\"pln\">opt</span><span class=\"pun\">/</span><span class=\"pln\">cdbg </span><span class=\"pun\">&amp;&amp;</span> <span class=\"pun\">\\</span><span class=\"pln\"><br>    wget </span><span class=\"pun\">-</span><span class=\"pln\">qO</span><span class=\"pun\">-</span><span class=\"pln\"> https</span><span class=\"pun\">:</span><span class=\"com\">//storage.googleapis.com/cloud-debugger/compute-java/debian-wheezy/cdbg_java_agent_gce.tar.gz | \\</span><span class=\"pln\"><br>    tar xvz </span><span class=\"pun\">-</span><span class=\"pln\">C </span><span class=\"pun\">/</span><span class=\"pln\">opt</span><span class=\"pun\">/</span><span class=\"pln\">cdbg---</span></code></pre>\n<p>You'll notice that the first thing we need to do is download the stackdriver agent.  For the time being I did this manually and put it in my repository under my jib directory.  You may have seen an <a href=\"https://puttzy.github.io/inject-credentials-file-during-cloud-build.html\">earlier entry</a> about how to copy things into your contianer at build time, but if not here's a little refresher.  It's really easy.  Just put them in a jib directory under <em>src/main/jib</em>.</p>\n<p class=\"msg msg--highlight \"><strong>todo</strong>: make the download and unzip of the agent part of my build process so I dont have to check it in.  This assures I get the latest version if it should ever change </p>\n<p><strong>Step 2: </strong><strong>Add the agent path to the startup call</strong></p>\n<pre class=\"prettyprint\"><code><span class=\"pln\">RUN  java </span><span class=\"pun\">-</span><span class=\"pln\">agentpath</span><span class=\"pun\">:</span><span class=\"str\">/opt/</span><span class=\"pln\">cdbg</span><span class=\"pun\">/</span><span class=\"pln\">cdbg_java_agent</span><span class=\"pun\">.</span><span class=\"pln\">so </span><span class=\"pun\">\\</span><span class=\"pln\"><br>    </span><span class=\"pun\">-</span><span class=\"pln\">jar PATH_TO_JAR_FILE</span></code></pre>\n<p>Jib makes this easy with their <a href=\"https://github.com/GoogleContainerTools/jib/tree/master/jib-gradle-plugin#extended-usage\">extended use propertie</a>s, in particular the <strong>jvmFlags</strong> setting.  </p>\n<pre>jib {<br>    to {<br>        image= \"&lt;path to my image repo&gt;\"<br>        tags= ['catalog-service-jib']<br>    }<br>    container {<br>        environment=[GOOGLE_APPLICATION_CREDENTIALS: './cred/logging_service_account.json', SPRING_PROFILES_ACTIVE: 'cloud']<br>        ports= ['8080']<br>        <strong><span style=\"color: blue;\">jvmFlags = ['-agentpath:./opt/cdbg/cdbg_java_agent.so']</span></strong><br>    }<br>}</pre>\n<p>If you watch closely as your <em>gradle jibdockerbuild</em> step runs you'll notice that it takes care of setting a lot of stuff for you:</p>\n<p><code>Container entrypoint set to [java, -agentpath:./opt/cdbg/cdbg_java_agent.so,  -cp, /app/resources:/app/classes:/app/libs/*, com.insightdi.refarch.catalogservice.CatalogServiceApplication]</code></p>\n<p><strong>Step 3: </strong><strong>Enjoy Logging and debugging through GCP</strong></p>\n<p>Once I deploy my application in cloud build I can now set breakpoints and add logging statements right through the either the <em>old</em> or the new stack driver debugging interface which ties in nicely with the google cloud source repositories.</p>\n<div class=\"gallery\"   >\n<figure class=\"gallery__item\"><a href=\"https://puttzy.github.io/media/posts/13//gallery/Screen-Shot-2019-10-08-at-1.31.50-PM.png\" ><img src=\"https://puttzy.github.io/media/posts/13//gallery/Screen-Shot-2019-10-08-at-1.31.50-PM-thumbnail.png\" alt=\"New Stack driver debugger\" width=\"720\" height=\"186\"></a></figure>\n<figure class=\"gallery__item\"><a href=\"https://puttzy.github.io/media/posts/13//gallery/Screen-Shot-2019-10-08-at-1.31.26-PM.png\" ><img src=\"https://puttzy.github.io/media/posts/13//gallery/Screen-Shot-2019-10-08-at-1.31.26-PM-thumbnail.png\" alt=\"Showing the statement in the logs\" width=\"720\" height=\"191\"></a></figure>\n</div>\n<p>Happy debugging</p>",
            "image": "https://puttzy.github.io/media/posts/13/private-git-repository.png",
            "author": {
                "name": "Dan Putt"
            },
            "tags": [
            ],
            "date_published": "2019-10-08T13:32:51-04:00",
            "date_modified": "2019-10-08T16:12:28-04:00"
        },
        {
            "id": "https://puttzy.github.io/spring-boot-admin-and-google-cloud-run.html",
            "url": "https://puttzy.github.io/spring-boot-admin-and-google-cloud-run.html",
            "title": "Spring Boot Admin and Google Cloud Run",
            "summary": "<div class=\"p6n-logs-json-view-row p6n-logs-json-active p6n-logs-json-hover\">As I continued moving services away from <a href=\"https://cloud.google.com/appengine/\">Google App Engine</a> and into <a href=\"https://cloud.google.com/run/\">Google Cloud Run</a> I ran into an unexpected issue with my <a href=\"https://github.com/codecentric/spring-boot-admin\">Spring Boot Admin</a> service that cost more more time than expected to dive into.  Hopefully this saves someone else (or me when I forget it) time in the future</div>\n<div class=\"p6n-logs-json-view-row p6n-logs-json-active p6n-logs-json-hover\"> </div>\n<div class=\"p6n-logs-json-view-row p6n-logs-json-active p6n-logs-json-hover\">",
            "content_html": "<div class=\"p6n-logs-json-view-row p6n-logs-json-active p6n-logs-json-hover\">As I continued moving services away from <a href=\"https://cloud.google.com/appengine/\">Google App Engine</a> and into <a href=\"https://cloud.google.com/run/\">Google Cloud Run</a> I ran into an unexpected issue with my <a href=\"https://github.com/codecentric/spring-boot-admin\">Spring Boot Admin</a> service that cost more more time than expected to dive into.  Hopefully this saves someone else (or me when I forget it) time in the future</div>\n<div class=\"p6n-logs-json-view-row p6n-logs-json-active p6n-logs-json-hover\"> </div>\n<div class=\"p6n-logs-json-view-row p6n-logs-json-active p6n-logs-json-hover\">To those that may not be aware, <a href=\"https://github.com/codecentric/spring-boot-admin\">Spring Boot Admin</a> provides an admin interface for managing all your registered <a href=\"http://projects.spring.io/spring-boot/\" title=\"Official Spring-Boot website\" rel=\"nofollow\">Spring Boot <sup>®</sup></a> applications.  From the <a href=\"https://codecentric.github.io/spring-boot-admin/2.1.6/#getting-started\">documentation</a>:</div>\n<pre class=\"p6n-logs-json-view-row p6n-logs-json-active p6n-logs-json-hover\">codecentric’s Spring Boot Admin is a community project to manage and monitor your <a href=\"http://projects.spring.io/spring-boot/\">Spring Boot</a> <sup>®</sup> applications. The applications register with our Spring Boot Admin Client (via HTTP) or are discovered using Spring Cloud <sup>®</sup> (e.g. Eureka, Consul). The UI is just a Vue.js application on top of the Spring Boot Actuator endpoints.</pre>\n<div class=\"p6n-logs-json-view-row p6n-logs-json-active p6n-logs-json-hover\">It's easy to set up and provides a nice UI for manage a collection of Spring boot applications.  </div>\n<div class=\"p6n-logs-json-view-row p6n-logs-json-active p6n-logs-json-hover\">\n<div class=\"gallery\"   >\n<figure class=\"gallery__item\"><a href=\"https://puttzy.github.io/media/posts/11/gallery/Screen-Shot-2019-09-30-at-11.09.49-AM.png\" ><img src=\"https://puttzy.github.io/media/posts/11/gallery/Screen-Shot-2019-09-30-at-11.09.49-AM-thumbnail.png\" alt=\"Spring Boot admin wallboard\" width=\"720\" height=\"412\"></a>\n<figcaption class=\"gallery-description\">Spring Boot admin wallboard</figcaption>\n</figure>\n<figure class=\"gallery__item\"><a href=\"https://puttzy.github.io/media/posts/11/gallery/Screen-Shot-2019-09-30-at-11.12.13-AM.png\" ><img src=\"https://puttzy.github.io/media/posts/11/gallery/Screen-Shot-2019-09-30-at-11.12.13-AM-thumbnail.png\" alt=\"Base Metrics\" width=\"720\" height=\"334\"></a>\n<figcaption class=\"gallery-description\">Base Metrics</figcaption>\n</figure>\n<figure class=\"gallery__item\"><a href=\"https://puttzy.github.io/media/posts/11/gallery/Screen-Shot-2019-09-30-at-11.12.51-AM.png\" ><img src=\"https://puttzy.github.io/media/posts/11/gallery/Screen-Shot-2019-09-30-at-11.12.51-AM-thumbnail.png\" alt=\"Logging Levels\" width=\"720\" height=\"276\"></a>\n<figcaption class=\"gallery-description\">You can change log levels on the fly</figcaption>\n</figure>\n</div>\n</div>\n<div class=\"p6n-logs-json-view-row p6n-logs-json-active p6n-logs-json-hover\"> In switching from running this on App Engine to Cloud run I was not getting errors on startup and everything loked good in the logs.  The problem was the Spring Boot Admin UI was blank.  Empty.  Null.  Nada. Blank.  Nill.  </div>\n<div class=\"p6n-logs-json-view-row p6n-logs-json-active p6n-logs-json-hover\"> </div>\n<div class=\"p6n-logs-json-view-row p6n-logs-json-active p6n-logs-json-hover\">So, what was the problem?  </div>\n<div class=\"p6n-logs-json-view-row p6n-logs-json-active p6n-logs-json-hover\"> </div>\n<div class=\"p6n-logs-json-view-row p6n-logs-json-active p6n-logs-json-hover\">After looking through the logs and finding a lot of things that were NOT the problem, I finally noticed THIS message:</div>\n<div class=\"p6n-logs-json-view-row p6n-logs-json-active p6n-logs-json-hover align-left\"> </div>\n<div class=\"p6n-logs-json-view-row p6n-logs-json-active p6n-logs-json-hover align-left\"><code>Endpoints for instance cf629ab00194 queried from https://catalog-service-jib-tmsragfh3a-ue.a.run.app:443/actuator are falsely using http. Rewritten to https. Consider configuring this instance to use 'server.use-forward-headers=true'.</code></div>\n<div class=\"p6n-logs-json-view-row p6n-logs-json-active p6n-logs-json-hover align-center\"> </div>\n<div class=\"p6n-logs-json-view-row p6n-logs-json-active p6n-logs-json-hover\">Well, that makes sense.  When I click on the URL provided in Cloud Run I do see a redirect message from Google.  (I have yet to figure this part out)  After a quick search I was able to figure out that you have to <a href=\"https://docs.spring.io/spring-boot/docs/current/reference/html/howto-embedded-web-servers.html#howto-use-tomcat-behind-a-proxy-server\">allow processing of forward headers within spring boot admin</a>.  Adding the following to my Spring Config everything was working as expected</div>\n<div class=\"p6n-logs-json-view-row p6n-logs-json-active p6n-logs-json-hover\">\n<pre>server:<br>  port: 8080<br><strong>  use-forward-headers: true</strong></pre>\n</div>\n<div class=\"p6n-logs-json-view-row p6n-logs-json-active p6n-logs-json-hover\">So, to summarize one quick setting in your spring application-cloud.yaml  to allow forward headers will enable your Spring Boot admin pages to not be blank.  </div>",
            "image": "https://puttzy.github.io/media/posts/11/logo-spring-boot-admin.png",
            "author": {
                "name": "Dan Putt"
            },
            "tags": [
            ],
            "date_published": "2019-09-30T11:17:49-04:00",
            "date_modified": "2019-09-30T11:53:11-04:00"
        },
        {
            "id": "https://puttzy.github.io/managing-google-runtime-configurations.html",
            "url": "https://puttzy.github.io/managing-google-runtime-configurations.html",
            "title": "Managing Google Runtime Configurations",
            "summary": "<p>Using <a href=\"https://spring.io/projects/spring-cloud-config\">Spring Cloud Config</a> with <a href=\"https://cloud.google.com/deployment-manager/runtime-configurator/reference/rest/\">Google Runtime Configs</a> is pretty nice, but also pretty painful.  There's no UI.  No straight forward way to see the configurations (buckets) or the variables contained within.  No easy (user friendly way) to add, delete, or update the variables.  After dealing with this a few weeks I decided to spend some time to make my own <a href=\"https://github.com/puttzy/GoogleCloudConfigManager\">little bash script</a> to assist in this process.  </p>\n",
            "content_html": "<p>Using <a href=\"https://spring.io/projects/spring-cloud-config\">Spring Cloud Config</a> with <a href=\"https://cloud.google.com/deployment-manager/runtime-configurator/reference/rest/\">Google Runtime Configs</a> is pretty nice, but also pretty painful.  There's no UI.  No straight forward way to see the configurations (buckets) or the variables contained within.  No easy (user friendly way) to add, delete, or update the variables.  After dealing with this a few weeks I decided to spend some time to make my own <a href=\"https://github.com/puttzy/GoogleCloudConfigManager\">little bash script</a> to assist in this process.  </p>\n\n<p>The bash script* found on my <a href=\"https://github.com/puttzy/GoogleCloudConfigManager\">github</a> can be used to List Variables, Update Variables, add/Delete Variables.  Nothing too fancy overall, but it's saving me some time in working with this capability.</p>\n<p><img class=\"post__image\" src=\"https://puttzy.github.io/media/posts/10/Screen-Shot-2019-09-26-at-9.26.22-AM.png\" alt=\"\" width=\"1192\" height=\"516\"></p>\n<p>All of this works via command line using <a href=\"https://cloud.google.com/sdk/gcloud/reference/beta/runtime-config/configs/\">beta commands</a> within gcloud.  Example: <code>gcloud beta runtime-config configs</code> </p>\n<p>Some things I may consider doing include:</p>\n<ul>\n<li><span style=\"text-decoration: line-through;\">Create or Delete an entire config bucket</span></li>\n<li><span style=\"text-decoration: line-through;\">Add the ability to switch projects</span></li>\n<li>Backup a variable that changes or is deleted</li>\n<li>create a UI and use the <a href=\"https://cloud.google.com/deployment-manager/runtime-configurator/reference/rest/\">Cloud Runtime Configuration API</a></li>\n<li><span style=\"text-decoration: line-through;\">Duplicate a configration and all variables </span></li>\n</ul>\n<p> </p>\n<p><em>*I use the phrase bash script loosely as I'm not a bash programmer.  I'm not good at it, I can just make things work.  I welcome any and all feedback, but right now, for my purposes this works pretty well</em></p>",
            "image": "https://puttzy.github.io/media/posts/10/SpringGCPConfig.jpg",
            "author": {
                "name": "Dan Putt"
            },
            "tags": [
            ],
            "date_published": "2019-09-26T09:56:29-04:00",
            "date_modified": "2019-09-30T12:38:54-04:00"
        },
        {
            "id": "https://puttzy.github.io/google-cloud-build-decrypting-kms-secrets.html",
            "url": "https://puttzy.github.io/google-cloud-build-decrypting-kms-secrets.html",
            "title": "Google Cloud Build decrypting KMS Secrets",
            "summary": "<p>In trying to follow more best practices and create a true reference architecture for Java in GCP I was trying to store my service account credential files encrypted using KMS then pull them out and decrypt them using using GCP KMS Service.  In doing so though I kept getting an error through Cloud Build saying I didn't have decrypt permissions.  </p>\n<p>It pains me to admit that this took me much longer to solve than it should have, mostly because of a deeply rooted <a href=\"https://www.urbandictionary.com/define.php?term=ID10T\">I.D.ten.T. error.</a>  </p>\n",
            "content_html": "<p>In trying to follow more best practices and create a true reference architecture for Java in GCP I was trying to store my service account credential files encrypted using KMS then pull them out and decrypt them using using GCP KMS Service.  In doing so though I kept getting an error through Cloud Build saying I didn't have decrypt permissions.  </p>\n<p>It pains me to admit that this took me much longer to solve than it should have, mostly because of a deeply rooted <a href=\"https://www.urbandictionary.com/define.php?term=ID10T\">I.D.ten.T. error.</a>  </p>\n\n<p>I started this process by following most of the excellent guide I found on a post on Medium - <a href=\"https://medium.com/google-cloud/using-google-cloud-platforms-cloud-key-management-service-kms-to-encrypt-decrypt-secrets-8ca7454a6b96\">Using GCP's Cloud Key Management Serice (KMS) to Encrypt/Decrypt Secrets</a>.</p>\n<p>In an earlier post I mentioned that I was storing my credentials file in a cloud storage bucket unencrypted.  Not great, right?  Changing that to storing an excrypted file was actually quite easy using GCP's KMS system.  </p>\n<p>The first thing one should do is create a new key-ring and new key - <em>keep in mind that key-rings cannot be deleted</em></p>\n<pre>gcloud kms keys create datastore-key \\<br>--location global \\<br>--keyring {your_keyring_name} \\<br>--purpose encryption</pre>\n<p>Then we'll create a new key and encrypt our plaintext (credetial) file into a new ciphertext (encrypted credential) file to upload into our cloud storage bucket.  If you saw <a href=\"inject-credentials-file-during-cloud-build.html\">my previous post</a>, you may know that the file I'm working with is a service account credentials file I created to allow StackDriver logging to be done through my cloud run application.  This file is being pulled down via one of my build steps.  But now, before uploading it, I want to encrypt it.   </p>\n<pre>gcloud kms encrypt --location=global \\<br>  --keyring=development-key-ring \\<br>  --key=datastore-key \\<br>  --plaintext-file=logging_service_account.json \\<br>  --ciphertext-file=encrypted_logging_service_account.json</pre>\n<p>The command above uses the key-ring we previosuly created, uses a new key of \"data-store\" and encrypts the local <em>logging_service_account.json</em> to a new file called <em>encyrpted_local logging_service_account.json</em>.  This encrypted file is what I'll now put in my storage bucket to be pulled, decrypted, and injected into my cloud run container via cloud build.</p>\n<pre>  # Pull the credentials file from our storage bucket<br>- name: 'gcr.io/cloud-builders/gsutil'<br>  args: ['cp', 'gs://{bucket_name}/encrypted_logging_service_account.json', './src/main/jib/cred']<br><br>  # decrypt the credentials file that we just pulled down<br>- name: 'gcr.io/cloud-builders/gcloud'<br>  args: ['kms', 'decrypt', '--location', 'global', '--keyring', 'development-key-ring', '--key', 'datastore-key', '--ciphertext-file', './src/main/jib/cred/encrypted_logging_service_account.json', '--plaintext-file', './src/main/jib/cred/logging_service_account.json']</pre>\n<p> </p>\n<p>Notice that the decrypt step, the second one, is virtually a reversal of the previous encrypt step.  </p>\n<p>Now we should be good to go.  Run our cloud build and all is right with the world.... Until we get a permissions issue.</p>\n<p class=\"msg msg--warning\">ERROR: build step 1 \"gcr.io/cloud-builders/gcloud\" failed: exit status 1<br>ERROR<br>Finished Step #1<br>Step #1: ERROR: (gcloud.kms.decrypt) PERMISSION_DENIED: Permission 'cloudkms.cryptoKeyVersions.useToDecrypt' denied for resource 'projects/inventory-dev-project/locations/global/keyRings/development-key-ring/cryptoKeys/datastore-key'.</p>\n<p> </p>\n<p><img class=\"post__image--left\" src=\"https://puttzy.github.io/media/posts/9/Screen-Shot-2019-09-09-at-11.10.08-PM.png\" alt=\"Add the KMS Decrypt Role to Cloud Run Agent\" width=\"310\" height=\"244\">This is where I spent more time than I'll readily admit.  Just know that I had the best of intentions when I started adding the \"Cloud KMS CryptoKey Decrypter\" to my Cloud Build service account.  The wrong service account apparently.  But we won't get into that.  Suffice it to say that once I added the permission to the correct account everything worked fine.</p>\n<p> </p>\n<p>In my trial and error though I did learn that I can also do this via <a href=\"https://cloud.google.com/kms/docs/iam\">GCloud commands</a>:</p>\n<pre>gcloud kms keyrings add-iam-policy-binding  \\<br>  --location=global development-key-ring \\<br>  --member=serviceAccount:{unique_id}@cloudbuild.gserviceaccount.com \\<br>  --role=roles/cloudkms.cryptoKeyDecrypter</pre>\n<p>So there you have it.  Encrypting a file, putting it in cloud storage, pulling it during cloud build, decrypting it, and injecting it into our container to be used at runtime.  </p>\n<h3 id=\"mcetoc_1dkdonsmk0\"><strong>Some other things I learned and next steps:</strong></h3>\n<h4 id=\"mcetoc_1dkdoo2ft1\">1. Determine what service account is the GCP  running process under</h4>\n<p>When debugging and trying to figure out why my service account constantly got permission denied even though I kept adding the permissions I realized I was working with the wrong service account.  I was able to figure this out with a simple step in my cloud build that told me who the agent was running as:</p>\n<pre>- name: 'gcr.io/cloud-builders/gcloud'<br>  args: ['auth', 'list']</pre>\n<p>which outputted:</p>\n<pre class=\"p6n-gcb-log p6n-gcb-log-wrap-lines\">* <strong>{unique_project_id}@cloudbuild.gserviceaccount.com</strong>\nACTIVE ACCOUNT\nCredentialed Accounts</pre>\n<h4 id=\"mcetoc_1dkdoo2ft1\">2. Next Step Encrypt the Storage Bucket and not the file itself</h4>\n<p>I believe it would be beneficial to <a href=\"https://cloud.google.com/storage/docs/encryption/\">encrypt the bucket</a> and everything that goes into it so that everything is automatically encrypted.  This ensure much better security.</p>\n<p> </p>",
            "image": "https://puttzy.github.io/media/posts/9/design-desk-eyewear-313690.jpg",
            "author": {
                "name": "Dan Putt"
            },
            "tags": [
            ],
            "date_published": "2019-09-10T09:50:24-04:00",
            "date_modified": "2019-09-10T10:42:25-04:00"
        },
        {
            "id": "https://puttzy.github.io/inject-credentials-file-during-cloud-build.html",
            "url": "https://puttzy.github.io/inject-credentials-file-during-cloud-build.html",
            "title": "Inject Credentials file with Cloud Build",
            "summary": "<p>The saga continues....</p>\n<p>In trying to get my jibbized container <em>(yes, the same one I continue to write about)</em> to run in <a href=\"https://cloud.google.com/run/\">Google Cloud Run</a> I started getting an error with my Spring Boot Stack driver logging.  I wasn't getting this error when deploying locally so what could it be?</p>\n",
            "content_html": "<p>The saga continues....</p>\n<p>In trying to get my jibbized container <em>(yes, the same one I continue to write about)</em> to run in <a href=\"https://cloud.google.com/run/\">Google Cloud Run</a> I started getting an error with my Spring Boot Stack driver logging.  I wasn't getting this error when deploying locally so what could it be?</p>\n\n<p>In this project I'm using <a href=\"https://docs.spring.io/spring-cloud-gcp/docs/1.1.0.M1/reference/html/_stackdriver_logging_support.html\">Spring Cloud Stack Driver Logging</a> so that I can plug right into the robust tools GCP provides out of the box for logging.  When running locally I found that have have to <em><strong>GOOGLE_APPLICATION_CREDENTIALS</strong></em> environment variable.  </p>\n<p>In my local build this is fine since in my jib task I can set it at compile time to a local file since jib <a href=\"https://github.com/GoogleContainerTools/jib/tree/master/jib-gradle-plugin#adding-arbitrary-files-to-the-image\">copies everything from the src/main/jib</a> directory into the new container.  </p>\n<pre>jib {<br>    to {<br>        image= \"gcr.io/${System.env.GCP_PROJECT}/{MyServiceName}\"<br>        tags= ['{TagForImage}']<br>    }<br>    container {<br>        environment=[<strong>GOOGLE_APPLICATION_CREDENTIALS: './cred/logging_service_account.json'</strong>]<br>        ports= ['8080']<br>    }<br>}</pre>\n<p>But when running in <a href=\"onsole.cloud.google.com\">Google Cloud Build</a> I don't have the credentials file since I dont want to put it into my source repository.  This causes an error on startup of the application</p>\n<p class=\"msg msg--warning\">java.lang.RuntimeException: com.google.cloud.logging.LoggingException: io.grpc.StatusRuntimeException: PERMISSION_DENIED: The request is missing a valid API key. at com.google.cloud.logging.LoggingImpl$7.onFailure(LoggingImpl.java:616) at com.google.api.core.ApiFutures$1.onFailure(ApiFutures.java:68) at </p>\n<p>So how can this be solved?  </p>\n<p>Well, the quick way is to</p>\n<ol>\n<li>Create a private <a href=\"https://cloud.google.com/storage/docs/creating-buckets\">Google Cloud Storage Bucket</a></li>\n<li>Upload the credentials file <em>(This assumes you know how to create the logging credentials file)</em></li>\n<li>Use GSUtil to download the file and copy it into your project directory</li>\n</ol>\n<p>Here is what that last step looks like in your cloudbuild.yaml file</p>\n<pre>steps:<br>  - name: 'gcr.io/cloud-builders/gsutil'<br>    args: ['cp', 'gs://{project-name}/{credential_file_name}.json', './src/main/jib/cred']</pre>\n<p>Eventually I'll switch all of this to use <a href=\"https://cloud.google.com/kms/\">Google Cloud KMS</a> and do it securely.  But for now this got me down the road.</p>\n<p>*<strong>update</strong>:  I've now explained how to use <a href=\"google-cloud-build-decrypting-kms-secrets.html\">GCP's KMS functionality to encrypt and decrypt a credentials file</a>*</p>\n<p class=\"msg msg--info\">*One thing to note - make sure the directory you are copying into - in my case ./src/main/jib/cred exists.  The copy step will show success but the file will not be download if it doesn't exist*</p>",
            "author": {
                "name": "Dan Putt"
            },
            "tags": [
            ],
            "date_published": "2019-09-09T22:20:56-04:00",
            "date_modified": "2019-09-10T14:11:53-04:00"
        },
        {
            "id": "https://puttzy.github.io/deploying-springboot-container-to-cloud-run-via-cloud-build.html",
            "url": "https://puttzy.github.io/deploying-springboot-container-to-cloud-run-via-cloud-build.html",
            "title": "Cloud Build + Cloud Run Errors",
            "summary": "<p>When deploying my newly <em>jibized application to <a href=\"https://cloud.google.com/run/\">Google Cloud Run</a> via</em> <a href=\"https://cloud.google.com/cloud-build/\">Google Cloud Build</a> I was plagued with a seemingly simple error that took me much longer to figure out than it should have.</p>\n",
            "content_html": "<p>When deploying my newly <em>jibized application to <a href=\"https://cloud.google.com/run/\">Google Cloud Run</a> via</em> <a href=\"https://cloud.google.com/cloud-build/\">Google Cloud Build</a> I was plagued with a seemingly simple error that took me much longer to figure out than it should have.</p>\n\n<pre class=\"p6n-gcb-log p6n-gcb-log-wrap-lines\">ERROR: (gcloud.beta.run.deploy) PERMISSION_DENIED: The caller does not have permission</pre>\n<p>I wasn't getting the error when using the <a href=\"https://cloud.google.com/cloud-build/docs/build-debug-locally\">cloud-build-local</a> CLI command.  So, being the simple genius I am, surmized it must be a permission issue on the agent running the task. </p>\n<p>The first thing I did was go into <a href=\"https://cloud.google.com/iam/\">IAM</a>, find the <em>${ProjectId}@cloudbuild.gserviceaccount.com </em>service account and give it the Cloud Run Admin role.  Easy enough, rerun and it will work.....</p>\n<p>Or, in my case, get a new error:</p>\n<pre class=\"p6n-gcb-log p6n-gcb-log-wrap-lines\">Starting Step #2\nStep #2: Already have image (with digest): gcr.io/cloud-builders/gcloud\nStep #2: Deploying container to Cloud Run service [catalog-service-jib] in project [my-project-name] region [us-east1]\nStep #2: Deploying...\nStep #2: failed\nStep #2: Deployment failed\nStep #2: ERROR: gcloud crashed (KeyError): u'details'\nStep #2: \nStep #2: If you would like to report this issue, please run the following command:\nStep #2: gcloud feedback\nStep #2: \nStep #2: To check gcloud for common problems, please run the following command:\nStep #2: gcloud info --run-diagnostics\nFinished Step #2\nERROR\nERROR: build step 2 \"gcr.io/cloud-builders/gcloud\" failed: exit status 1</pre>\n<p>From this I can assume that I got the right user as I got a new error....But it doesn't solve my actual problem of not being able to deploy my app via Cloud Build.</p>\n<p>Playing around, taking some wild guesses, screwing up some permissions I decided to finally succomb and ask the Google Machine what was going on.  Within a few click I had track down the missing role: <a href=\"https://cloud.google.com/iam/docs/service-accounts#the_service_account_user_role\">Service Account User</a> - Which even after reading still hurt my head but it was a little late, and I was tired.</p>\n<p>Adding that magic role allowed my container to deploy and start (and fail do a credentails file I have to inject into mty container but dont want to check in to my repo.....but that's a problem for another time)</p>\n<p class=\"msg msg--highlight \"><strong>Takeaways I want to follow up on:</strong><br>1. Service Account User Role<br>2. How to run a command as a specific user - name when I get an error during cloud build how can I run somethng as the cloud build agent account<br>    - this would be especially helpful if I coudl do this from cloud shell</p>",
            "author": {
                "name": "Dan Putt"
            },
            "tags": [
            ],
            "date_published": "2019-09-06T21:56:18-04:00",
            "date_modified": "2019-09-09T22:33:08-04:00"
        },
        {
            "id": "https://puttzy.github.io/spring-boot-healthchecks-in-google-cloud-run.html",
            "url": "https://puttzy.github.io/spring-boot-healthchecks-in-google-cloud-run.html",
            "title": "Spring Boot Healthchecks in Google Cloud Run",
            "summary": "When trying to get my Spring Boot application to run on Google Cloud Run the health checks were returning { \"status\": \"DOWN\" }Which is odd when you consider the fact that I could get to the health check itself. How can it be running yet return&hellip;",
            "content_html": "<p>When trying to get my Spring Boot application to run on Google Cloud Run the health checks were returning </p>\n<pre>{<br>  \"status\": \"DOWN\"<br>}</pre>\n<p>Which is odd when you consider the fact that I could get to the health check itself.  How can it be running yet return a status of down?</p>\n<p>In my Cloud Run logs I saw the error:</p>\n<pre>o.s.b.a.system.DiskSpaceHealthIndicator : Free disk space below threshold. Available: 0 bytes (threshold: 10485760B)</pre>\n<p>After doing some digging, since I've never really looker too deeply into the <a href=\"It turns out, for the unitiated like me, Spring checks a bunch of items when performing a healthcheck.\">Spring Health Indicators</a>, I realized that spring checks a bunch of different items as part of their status.  Disk Space being one of them.  </p>\n<p>Since I'm running this as <em>a <a href=\"https://cloud.google.com/blog/products/gcp/introducing-jib-build-java-docker-images-better\">jibbified</a> Spring</em> Boot application I didn't reserve any diskspace and the application is running in a OCI without an underlying OS - which totally makes sense why it was failing.</p>\n<p>The first thing I did was enable showing the details of the health check (/actuator/health).  In my application.yaml I added:</p>\n<pre>spring.endpoint.health.show-details=always</pre>\n<p>which returned me a bunch more information - notice the <strong>bold</strong> line below</p>\n<pre>{<br>  <strong>\"status\": \"DOWN\",</strong><br><strong>  \"details\": {</strong><br><strong>    \"diskSpace\": {</strong><br><strong>      \"status\": \"DOWN\",</strong><br><strong>      \"details\": {</strong><br><strong>        \"total\": 0,</strong><br><strong>        \"free\": 0,</strong><br><strong>        \"threshold\": 10485760</strong><br><strong>      }</strong><br><strong>    },</strong><br>    \"db\": {<br>      \"status\": \"UP\",<br>      \"details\": {<br>        \"database\": \"MySQL\",<br>        \"hello\": 1<br>      }<br>    },<br>    \"refreshScope\": {<br>      \"status\": \"UP\"<br>    },<br>    \"discoveryComposite\": {<br>      \"status\": \"UP\",<br>      \"details\": {<br>        \"discoveryClient\": {<br>          \"status\": \"UP\",<br>          \"details\": {<br>            \"services\": [\"api-gateway\", \"catalog-service\", \"cart-service\"]<br>          }<br>        },<br>        \"eureka\": {<br>          \"description\": \"Eureka discovery client has not yet successfully connected to a Eureka server\",<br>          \"status\": \"UP\",<br>          \"details\": {<br>            \"applications\": {<br>              \"API-GATEWAY\": 1,<br>              \"CATALOG-SERVICE\": 1,<br>              \"CART-SERVICE\": 1<br>            }<br>          }<br>        }<br>      }<br>    },<br>    \"hystrix\": {<br>      \"status\": \"UP\"<br>    }<br>  }<br>}</pre>\n<p>When one of the health indicators is \"down\" the status of the service returns \"down\" - which in turn removes it completely from Eureka.</p>\n<p>By addinng another simple config to my application.yaml I was able to fix this problem </p>\n<pre>health.diskspace.enabled=false</pre>\n<p>Which removed the disck check from my status, and listed the entire service a healthy  and allowed it to register with Eureka   </p>\n<pre><br>  \"status\": \"UP\",<br>  \"details\": {<br>    \"db\": {<br>      \"status\": \"UP\",<br>      \"details\": {<br>        \"database\": \"MySQL\",<br>        \"hello\": 1<br>      }<br>    },<br>    \"refreshScope\": {<br>      \"status\": \"UP\"<br>    },<br>    \"discoveryComposite\": {<br>      \"status\": \"UP\",<br>      \"details\": {<br>        \"discoveryClient\": {<br>          \"status\": \"UP\",<br>          \"details\": {<br>            \"services\": [\"api-gateway\", \"cart-service\", \"catalog-service\"]<br>          }<br>        },<br>        \"eureka\": {<br>          \"description\": \"Remote status from Eureka server\",<br>          \"status\": \"UP\",<br>          \"details\": {<br>            \"applications\": {<br>              \"API-GATEWAY\": 1,<br>              \"CATALOG-SERVICE\": 1,<br>              \"CART-SERVICE\": 1<br>            }<br>          }<br>        }<br>      }<br>    },<br>    \"hystrix\": {<br>      \"status\": \"UP\"<br>    }<br>  }<br>}</pre>",
            "image": "https://puttzy.github.io/media/posts/2/cloud-run.png",
            "author": {
                "name": "Dan Putt"
            },
            "tags": [
            ],
            "date_published": "2019-09-05T22:31:35-04:00",
            "date_modified": "2019-09-06T11:40:21-04:00"
        }
    ]
}
