<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Puttz&#x27;n Around in Code</title>
    <link href="https://puttzy.github.io/feed.xml" rel="self" />
    <link href="https://puttzy.github.io" />
    <updated>2019-09-09T22:33:15-04:00</updated>
    <author>
        <name>Dan Putt</name>
    </author>
    <id>https://puttzy.github.io</id>

    <entry>
        <title>Inject Credentials file with Cloud Build</title>
        <author>
            <name>Dan Putt</name>
        </author>
        <link href="https://puttzy.github.io/inject-credentials-file-during-cloud-build.html"/>
        <id>https://puttzy.github.io/inject-credentials-file-during-cloud-build.html</id>

        <updated>2019-09-09T22:24:40-04:00</updated>
            <summary>
                <![CDATA[
                    <p>The saga continues....</p>
<p>In trying to get my jibbized container <em>(yes, the same one I continue to write about)</em> to run in <a href="https://cloud.google.com/run/">Google Cloud Run</a> I started getting an error with my Spring Boot Stack driver logging.  I wasn't getting this error when deploying locally so what could it be?</p>

                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <p>The saga continues....</p>
<p>In trying to get my jibbized container <em>(yes, the same one I continue to write about)</em> to run in <a href="https://cloud.google.com/run/">Google Cloud Run</a> I started getting an error with my Spring Boot Stack driver logging.  I wasn't getting this error when deploying locally so what could it be?</p>

<p>In this project I'm using <a href="https://docs.spring.io/spring-cloud-gcp/docs/1.1.0.M1/reference/html/_stackdriver_logging_support.html">Spring Cloud Stack Driver Logging</a> so that I can plug right into the robust tools GCP provides out of the box for logging.  When running locally I found that have have to <em><strong>GOOGLE_APPLICATION_CREDENTIALS</strong></em> environment variable.  </p>
<p>In my local build this is fine since in my jib task I can set it at compile time to a local file since jib copies everything from the src/main/jib directory into the new container.  </p>
<pre>jib {<br>    to {<br>        image= "gcr.io/${System.env.GCP_PROJECT}/{MyServiceName}"<br>        tags= ['{TagForImage}']<br>    }<br>    container {<br>        environment=[<strong>GOOGLE_APPLICATION_CREDENTIALS: './cred/logging_service_account.json'</strong>]<br>        ports= ['8080']<br>    }<br>}</pre>
<p>But when running in <a href="onsole.cloud.google.com">Google Cloud Build</a> I don't have the credentials file since I dont want to put it into my source repository.  This causes an error on startup of the application</p>
<p class="msg msg--warning">java.lang.RuntimeException: com.google.cloud.logging.LoggingException: io.grpc.StatusRuntimeException: PERMISSION_DENIED: The request is missing a valid API key. at com.google.cloud.logging.LoggingImpl$7.onFailure(LoggingImpl.java:616) at com.google.api.core.ApiFutures$1.onFailure(ApiFutures.java:68) at </p>
<p>So how can this be solved?  </p>
<p>Well, the quick way is to</p>
<ol>
<li>Create a private <a href="https://cloud.google.com/storage/docs/creating-buckets">Google Cloud Storage Bucket</a></li>
<li>Upload the credentials file <em>(This assumes you know how to create the logging credentials file)</em></li>
<li>Use GSUtil to download the file and copy it into your project directory</li>
</ol>
<p>Here is what that last step looks like in your cloudbuild.yaml file</p>
<pre>steps:<br>  - name: 'gcr.io/cloud-builders/gsutil'<br>    args: ['cp', 'gs://{project-name}/{credential_file_name}.json', './src/main/jib/cred']</pre>
<p>Eventually I'll switch all of this to use <a href="https://cloud.google.com/kms/">Google Cloud KMS</a> and do it securely.  But for now this got me down the road.</p>
<p class="msg msg--info">*One thing to note - make sure the directory you are copying into - in my case ./src/main/jib/cred exists.  The copy step will show success but the file will not be download*</p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Cloud Build + Cloud Run Errors</title>
        <author>
            <name>Dan Putt</name>
        </author>
        <link href="https://puttzy.github.io/deploying-springboot-container-to-cloud-run-via-cloud-build.html"/>
        <id>https://puttzy.github.io/deploying-springboot-container-to-cloud-run-via-cloud-build.html</id>

        <updated>2019-09-09T22:33:08-04:00</updated>
            <summary>
                <![CDATA[
                    <p>When deploying my newly <em>jibized application to <a href="https://cloud.google.com/run/">Google Cloud Run</a> via</em> <a href="https://cloud.google.com/cloud-build/">Google Cloud Build</a> I was plagued with a seemingly simple error that took me much longer to figure out than it should have.</p>

                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <p>When deploying my newly <em>jibized application to <a href="https://cloud.google.com/run/">Google Cloud Run</a> via</em> <a href="https://cloud.google.com/cloud-build/">Google Cloud Build</a> I was plagued with a seemingly simple error that took me much longer to figure out than it should have.</p>

<pre class="p6n-gcb-log p6n-gcb-log-wrap-lines">ERROR: (gcloud.beta.run.deploy) PERMISSION_DENIED: The caller does not have permission</pre>
<p>I wasn't getting the error when using the <a href="https://cloud.google.com/cloud-build/docs/build-debug-locally">cloud-build-local</a> CLI command.  So, being the simple genius I am, surmized it must be a permission issue on the agent running the task. </p>
<p>The first thing I did was go into <a href="https://cloud.google.com/iam/">IAM</a>, find the <em>${ProjectId}@cloudbuild.gserviceaccount.com </em>service account and give it the Cloud Run Admin role.  Easy enough, rerun and it will work.....</p>
<p>Or, in my case, get a new error:</p>
<pre class="p6n-gcb-log p6n-gcb-log-wrap-lines">Starting Step #2
Step #2: Already have image (with digest): gcr.io/cloud-builders/gcloud
Step #2: Deploying container to Cloud Run service [catalog-service-jib] in project [my-project-name] region [us-east1]
Step #2: Deploying...
Step #2: failed
Step #2: Deployment failed
Step #2: ERROR: gcloud crashed (KeyError): u'details'
Step #2: 
Step #2: If you would like to report this issue, please run the following command:
Step #2: gcloud feedback
Step #2: 
Step #2: To check gcloud for common problems, please run the following command:
Step #2: gcloud info --run-diagnostics
Finished Step #2
ERROR
ERROR: build step 2 "gcr.io/cloud-builders/gcloud" failed: exit status 1</pre>
<p>From this I can assume that I got the right user as I got a new error....But it doesn't solve my actual problem of not being able to deploy my app via Cloud Build.</p>
<p>Playing around, taking some wild guesses, screwing up some permissions I decided to finally succomb and ask the Google Machine what was going on.  Within a few click I had track down the missing role: <a href="https://cloud.google.com/iam/docs/service-accounts#the_service_account_user_role">Service Account User</a> - Which even after reading still hurt my head but it was a little late, and I was tired.</p>
<p>Adding that magic role allowed my container to deploy and start (and fail do a credentails file I have to inject into mty container but dont want to check in to my repo.....but that's a problem for another time)</p>
<p class="msg msg--highlight "><strong>Takeaways I want to follow up on:</strong><br>1. Service Account User Role<br>2. How to run a command as a specific user - name when I get an error during cloud build how can I run somethng as the cloud build agent account<br>    - this would be especially helpful if I coudl do this from cloud shell</p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Spring Boot Healthchecks in Google Cloud Run</title>
        <author>
            <name>Dan Putt</name>
        </author>
        <link href="https://puttzy.github.io/spring-boot-healthchecks-in-google-cloud-run.html"/>
        <id>https://puttzy.github.io/spring-boot-healthchecks-in-google-cloud-run.html</id>

        <updated>2019-09-06T11:40:21-04:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://puttzy.github.io/media/posts/2/cloud-run.png" alt="" />
                    When trying to get my Spring Boot application to run on Google Cloud Run the health checks were returning { "status": "DOWN" }Which is odd when you consider the fact that I could get to the health check itself. How can it be running yet return&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <img src="https://puttzy.github.io/media/posts/2/cloud-run.png" alt="" />
                <p>When trying to get my Spring Boot application to run on Google Cloud Run the health checks were returning </p>
<pre>{<br>  "status": "DOWN"<br>}</pre>
<p>Which is odd when you consider the fact that I could get to the health check itself.  How can it be running yet return a status of down?</p>
<p>In my Cloud Run logs I saw the error:</p>
<pre>o.s.b.a.system.DiskSpaceHealthIndicator : Free disk space below threshold. Available: 0 bytes (threshold: 10485760B)</pre>
<p>After doing some digging, since I've never really looker too deeply into the <a href="It turns out, for the unitiated like me, Spring checks a bunch of items when performing a healthcheck.">Spring Health Indicators</a>, I realized that spring checks a bunch of different items as part of their status.  Disk Space being one of them.  </p>
<p>Since I'm running this as <em>a <a href="https://cloud.google.com/blog/products/gcp/introducing-jib-build-java-docker-images-better">jibbified</a> Spring</em> Boot application I didn't reserve any diskspace and the application is running in a OCI without an underlying OS - which totally makes sense why it was failing.</p>
<p>The first thing I did was enable showing the details of the health check (/actuator/health).  In my application.yaml I added:</p>
<pre>spring.endpoint.health.show-details=always</pre>
<p>which returned me a bunch more information - notice the <strong>bold</strong> line below</p>
<pre>{<br>  <strong>"status": "DOWN",</strong><br><strong>  "details": {</strong><br><strong>    "diskSpace": {</strong><br><strong>      "status": "DOWN",</strong><br><strong>      "details": {</strong><br><strong>        "total": 0,</strong><br><strong>        "free": 0,</strong><br><strong>        "threshold": 10485760</strong><br><strong>      }</strong><br><strong>    },</strong><br>    "db": {<br>      "status": "UP",<br>      "details": {<br>        "database": "MySQL",<br>        "hello": 1<br>      }<br>    },<br>    "refreshScope": {<br>      "status": "UP"<br>    },<br>    "discoveryComposite": {<br>      "status": "UP",<br>      "details": {<br>        "discoveryClient": {<br>          "status": "UP",<br>          "details": {<br>            "services": ["api-gateway", "catalog-service", "cart-service"]<br>          }<br>        },<br>        "eureka": {<br>          "description": "Eureka discovery client has not yet successfully connected to a Eureka server",<br>          "status": "UP",<br>          "details": {<br>            "applications": {<br>              "API-GATEWAY": 1,<br>              "CATALOG-SERVICE": 1,<br>              "CART-SERVICE": 1<br>            }<br>          }<br>        }<br>      }<br>    },<br>    "hystrix": {<br>      "status": "UP"<br>    }<br>  }<br>}</pre>
<p>When one of the health indicators is "down" the status of the service returns "down" - which in turn removes it completely from Eureka.</p>
<p>By addinng another simple config to my application.yaml I was able to fix this problem </p>
<pre>health.diskspace.enabled=false</pre>
<p>Which removed the disck check from my status, and listed the entire service a healthy  and allowed it to register with Eureka   </p>
<pre><br>  "status": "UP",<br>  "details": {<br>    "db": {<br>      "status": "UP",<br>      "details": {<br>        "database": "MySQL",<br>        "hello": 1<br>      }<br>    },<br>    "refreshScope": {<br>      "status": "UP"<br>    },<br>    "discoveryComposite": {<br>      "status": "UP",<br>      "details": {<br>        "discoveryClient": {<br>          "status": "UP",<br>          "details": {<br>            "services": ["api-gateway", "cart-service", "catalog-service"]<br>          }<br>        },<br>        "eureka": {<br>          "description": "Remote status from Eureka server",<br>          "status": "UP",<br>          "details": {<br>            "applications": {<br>              "API-GATEWAY": 1,<br>              "CATALOG-SERVICE": 1,<br>              "CART-SERVICE": 1<br>            }<br>          }<br>        }<br>      }<br>    },<br>    "hystrix": {<br>      "status": "UP"<br>    }<br>  }<br>}</pre>
            ]]>
        </content>
    </entry>
</feed>
